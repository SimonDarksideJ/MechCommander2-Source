//****************************************************************************************//
//
//		Ecounter 1 - Group 3 - Group of 2 Drillisons patrolling north side of SE Water.
//
//      MISSION:  Mc2_11
//		These Unit(s) patrol the north side of the SE water and will attack using (Visual).
//		
//
//****************************************************************************************//

fsm mc2_11_EC1_Grp3;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		
		//**************ADD***********************
		
		static PatrolState		startLakePatrolState;
		static PatrolPath			startLakePatrolPath;
		
		
		//**************ENDADD***********************
		
		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 225, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 250, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");



		startLakePatrolState[0] = PATROL_TYPE_LOOPING;
		startLakePatrolState[1] = 2;    //?num points
		startLakePatrolState[2] = -1;    //?num cycles
		startLakePatrolState[3] = PATROL_DIRECTION_FORWARD;
		startLakePatrolState[4] = -1;    //reset cur point
		startLakePatrolState[5] = -1;    //reset cur cycle
		
		startLakePatrolPath[0, 0] = 6122.6;
		startLakePatrolPath[0, 1] = -106.6;
		startLakePatrolPath[1, 0] = -405.3;
		startLakePatrolPath[1, 1] = -1898.6;


		willRequestHelp = false;
		helpRequestFrequency = 20;
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code

		update;
		//coreAttackTactic(0, TACORDER_PARAM_PURSUE, TACTIC_RIGHT_FLANK, tacticState);
		setDebugString(-1, 3, " ATTACK    ");
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;
//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, " Patrol lake    ");
		corePatrol(startLakePatrolstate, startLakePatrolPath, AttackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
