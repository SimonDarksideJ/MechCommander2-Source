//****************************************************************************************//
//
//		Encounter 1
//			Group of ???
//
//      MISSION:  Mc2_24
//		Unit(s) that Patrol Area
//		
//
//****************************************************************************************//

fsm mc2_23_EC2_razor_recap_sens;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//**************NEW***********************
		static PatrolState		startWaterPatrolState;
		static PatrolPath		startWaterPatrolPath;
		static PatrolState		startBridgePatrolState;
		static PatrolPath		startBridgePatrolPath;
		static PatrolState		startSensorPatrolState;
		static PatrolPath		startSensorPatrolPath;
    static boolean			Runaway_Trigger_Check;
    static boolean			Recapture_Trigger_Check;
		static boolean			poweredDown;
		static boolean			poweredUp;
		static real					Runaway_TimerDelay;
		static boolean			Runaway_Timer_Check;
//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 200, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);


		AttackStateHandle = getStateHandle("attack");

		Runaway_Trigger_Check = FALSE;
		Recapture_Trigger_Check = FALSE;
		Runaway_Timer_Check = FALSE;

		//-------------------------------------------
		// Setup the Patrol here...
		//XL startBase1PatrolState Start

		startWaterPatrolState[0] = PATROL_TYPE_LINEAR;
		startWaterPatrolState[1] = 5;    //?num points
		startWaterPatrolState[2] = 1;    //?num cycles
		startWaterPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startWaterPatrolState[4] = -1;    //reset cur point
		startWaterPatrolState[5] = -1;    //reset cur cycle
		startWaterPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

		startWaterPatrolPath[0, 0] = 3136.000;
		startWaterPatrolPath[0, 1] = 1856.000;
		startWaterPatrolPath[1, 0] = 2368.000;
		startWaterPatrolPath[1, 1] = 1216.000;
		startWaterPatrolPath[2, 0] = 1344.000;
		startWaterPatrolPath[2, 1] = 1088.000;
		startWaterPatrolPath[3, 0] = -832.000;
		startWaterPatrolPath[3, 1] = 1600.000;
		startWaterPatrolPath[4, 0] = -1472.000;
		startWaterPatrolPath[4, 1] = 3520.000;
		startWaterPatrolPath[4, 0] = -3008.000;
		startWaterPatrolPath[4, 1] = 3648.000;
		startWaterPatrolPath[4, 0] = -5568.000;
		startWaterPatrolPath[4, 1] = 5568.000;
		

		startBridgePatrolState[0] = PATROL_TYPE_LINEAR;
		startBridgePatrolState[1] = 4;    //?num points
		startBridgePatrolState[2] = 1;    //?num cycles
		startBridgePatrolState[3] = PATROL_DIRECTION_FORWARD;
		startBridgePatrolState[4] = -1;    //reset cur point
		startBridgePatrolState[5] = -1;    //reset cur cycle
		startBridgePatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

		startBridgePatrolPath[0, 0] = 2752.000;
		startBridgePatrolPath[0, 1] = 3904.000;
		startBridgePatrolPath[1, 0] = 1344.000;
		startBridgePatrolPath[1, 1] = 3648.000;
		startBridgePatrolPath[2, 0] = -1472.000;
		startBridgePatrolPath[2, 1] = 3648.000;
		startBridgePatrolPath[3, 0] = -5568.000;
		startBridgePatrolPath[3, 1] = 5568.000;
		

		startSensorPatrolState[0] = PATROL_TYPE_LOOPING;
		startSensorPatrolState[1] = 4;    //?num points
		startSensorPatrolState[2] = 1;    //?num cycles
		startSensorPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startSensorPatrolState[4] = -1;    //reset cur point
		startSensorPatrolState[5] = -1;    //reset cur cycle
		startSensorPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

		startSensorPatrolPath[0, 0] = -1472.000;
		startSensorPatrolPath[0, 1] = 3648.000;
		startSensorPatrolPath[1, 0] = 320.000;
		startSensorPatrolPath[1, 1] = 3648.000;
		startSensorPatrolPath[2, 0] = 1472.000;
		startSensorPatrolPath[2, 1] = 1088.000;
		startSensorPatrolPath[3, 0] = 1984.000;
		startSensorPatrolPath[3, 1] = 1344.000;
		startSensorPatrolPath[4, 0] = 2496.000;
		startSensorPatrolPath[4, 1] = 1600.000;
		startSensorPatrolPath[5, 0] = 3136.000;
		startSensorPatrolPath[5, 1] = 2112.000;
		startSensorPatrolPath[6, 0] = 2624.000;
		startSensorPatrolPath[6, 1] = 2581.333;
		

		startPatrolState[0] = PATROL_TYPE_LOOPING;
		startPatrolState[1] = 3;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;
		startPatrolPath[0, 0] = 2240.000;
		startPatrolPath[0, 1] = 3008.000;
		startPatrolPath[1, 0] = 2624.000;
		startPatrolPath[1, 1] = 3008.000;
		startPatrolPath[2, 0] = 2752.000;
		startPatrolPath[2, 1] = 3520.000;

		//XLs startBase1PatrolPath end


		willRequestHelp = false; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		// Trigger for Razorbacks to run away and hide by way of Bridge
		if (EC2_PlayerAtBridge) then
			if (NOT Runaway_Trigger_Check) then
				Runaway_TimerDelay = getTime + 10; //Wait 10 secs before Running Away
				Runaway_Trigger_Check = TRUE;
			else
				if ((getTime > Runaway_TimerDelay) AND (Not Runaway_Timer_Check)) then
							Runaway_Timer_Check = TRUE;
							trans RunAwaybyWater;
				endif;
			endif;
		endif;
		

		// Trigger for Razorbacks to run away and hide by way of Water
		if (EC2_PlayerAtWater) then
			if (NOT Runaway_Trigger_Check) then
				Runaway_TimerDelay = getTime + 10; //Wait 10 secs before Running Away
				Runaway_Trigger_Check = TRUE;
			else
				if ((getTime > Runaway_TimerDelay) AND (Not Runaway_Timer_Check)) then
							Runaway_Timer_Check = TRUE;
					trans RunAwaybyBridge;
				endif;
			endif;
		endif;
		

		// Trigger for Razorbacks to recapture Sensor Control
		if (EC2_Recapture_Sensors) then
			if (NOT Recapture_Trigger_Check) then
				Recapture_Trigger_Check = TRUE;
				if (curStateHandle <> AttackStateHandle) then
					trans RunToSensors;
				endif;
			endif;
		endif;
		
		
		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;


//----------------------------------------------------------------------------------------

state RunAwaybyWater;

	code
		//coreRun = True;
		
		update;
		setDebugString(-1, 3, " RunAwaybyWater    ");
		corePatrol(startWaterPatrolState, startWaterPatrolPath, -1);
		resetOrders(1);

endstate;


//----------------------------------------------------------------------------------------

state RunAwaybyBridge;
	
	code
		//coreRun = True;
		
		update;
		setDebugString(-1, 3, " RunAwaybyBridge    ");
		corePatrol(startBridgePatrolState, startBridgePatrolPath, -1);
		resetOrders(1);

endstate;


//----------------------------------------------------------------------------------------

state RunToSensors;
		
	code
		update;
		setDebugString(-1, 3, " RunToSensors    ");
		corePatrol(startSensorPatrolState, startSensorPatrolPath, AttackStateHandle);
		corePatrol(startPatrolState, startPatrolPath, AttackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_LEFT_FLANK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;


//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, " GuardingArea     ");
		coreGuard(startPosition, -1, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
