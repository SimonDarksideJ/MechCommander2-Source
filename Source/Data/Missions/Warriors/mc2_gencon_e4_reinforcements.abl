//****************************************************************************************//
// 
//		GROUP E4_CENTIP
//
//      MISSION:  GENCON
//
//****************************************************************************************//

fsm mc2_gencon_e4_reinforcements;

	var

		static WorldPosition	startPosition;
		static PatrolState		factoryPatrolState;
		static PatrolPath		factoryPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			factoryCapturedStateHandle;
		static boolean			IsCapturedSet;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 400, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		factoryCapturedStateHandle = getStateHandle("factoryCaptured");

		IsCapturedSet = false;

		factoryPatrolState[0] = PATROL_TYPE_LINEAR;    
		factoryPatrolState[1] = 1;    //?num points
		factoryPatrolState[2] = 1;    //?num cycles
		factoryPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		factoryPatrolState[4] = -1;    //reset cur point
		factoryPatrolState[5] = -1;    //reset cur cycle
		factoryPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		factoryPatrolPath[0, 0] = -4629.333;
		factoryPatrolPath[0, 1] = 4800.0;

		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 300; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]	pilotEventParams;
		integer		curTarget;
		real		curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real		distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		curStateHandle = getCurrentStateHandle;
		if (objectteam(48102) <> objectteam(-1)) then
			mcprint("weapons facility captured");
			if (not IsCapturedSet) then
				IsCapturedSet = true;
				if (factoryCapturedVO < 0.0) then
					factoryCapturedVO = getTime + 5.0;
				endif;
				if (curStateHandle <> factoryCapturedStateHandle) then
					mcprint("trans factoryCaptured");
					trans factoryCaptured;
				endif;
			endif;
		endif;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer			weaponsStatus;
		integer[35]		weaponList;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state factoryCaptured;

	var

		WorldPosition	factoryPos;

	code

		update;
		setDebugString(-1, 3, "   gotToBase    ");

		setWillHelp(true);
		factoryPos[0] = -4629.333;
		factoryPos[1] = 4800.0;
		factoryPos[2] = 0.0;
		if (numFunctionalWeapons > 0) then
			corePatrol(factoryPatrolState, factoryPatrolPath, AttackStateHandle);
			coreGuard(factoryPos, -1, AttackStateHandle);
		else
			setDebugString(-1, 3, " gotToBase(NO WP) ");
			corePatrol(factoryPatrolState, factoryPatrolPath, -1);
			trans noWeapons;
		endif;

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		setWillHelp(false);
		update;
		coreWait(999999.0, -1, -1);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
