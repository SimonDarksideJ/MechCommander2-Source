//****************************************************************************************//
//
//		
//
//****************************************************************************************//

fsm pathptrl3;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************//

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//------------------- Changing contact_criteria_visual_or_sensor to contact_criteria_sensor
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 325, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");


		startPatrolState[0] = PATROL_TYPE_LINEAR;
		startPatrolState[1] = 15;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		//startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;
		startPatrolPath[0, 0] = -5610.000;
		startPatrolPath[0, 1] = 4672.000;
		startPatrolPath[1, 0] = -5568.000;
		startPatrolPath[1, 1] = 4160.000;
		startPatrolPath[2, 0] = -5568.000;
		startPatrolPath[2, 1] = 3904.000;
		startPatrolPath[3, 0] = -4458.667;
		startPatrolPath[3, 1] = 3904.000;
		startPatrolPath[4, 0] = -4177.333;
		startPatrolPath[4, 1] = 4288.000;
		startPatrolPath[5, 0] = -3520.000;
		startPatrolPath[5, 1] = 4288.000;
		startPatrolPath[6, 0] = -3477.333;
		startPatrolPath[6, 1] = 4160.000;
		startPatrolPath[7, 0] = -3093.333;
		startPatrolPath[7, 1] = 3904.000;
		startPatrolPath[8, 0] = -2410.667;
		startPatrolPath[8, 1] = 3904.000;
		startPatrolPath[9, 0] = -2240.000;
		startPatrolPath[9, 1] = 3733.333;
		startPatrolPath[10, 0] = -2240.000;
		startPatrolPath[10, 1] = 3392.000;
		startPatrolPath[11, 0] = -2026.667;
		startPatrolPath[11, 1] = 3392.000;
		startPatrolPath[12, 0] = -1344.000;
		startPatrolPath[12, 1] = 2837.333;
		startPatrolPath[13, 0] = -1344.000;
		startPatrolPath[13, 1] = 2624.000;
		startPatrolPath[14, 0] = -1173.333;
		startPatrolPath[14, 1] = 2410.667;
		
		
		willRequestHelp = false; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters																
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		//if (numFunctionalWeapons == 0) then
		//	trans noWeapons;
	 // endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	code

		update;
		setDebugString(-1, 3, " Panic Attack    ");		
		//coreRun = True;
		corePatrol(startPatrolState, startPatrolPath, -1);
		resetOrders(1);

		
endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "StartPatrol1     ");
		//coreRun = False;
		corePatrol(startPatrolState, startPatrolPath, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
