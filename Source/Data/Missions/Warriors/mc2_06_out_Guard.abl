//****************************************************************************************//
//
//		This brain is used to guard the Base
//
//      MISSION:  Mc2_2 Tutorial Brain
//
//
//****************************************************************************************//

fsm mc2_06_out_Guard;

	var

		static WorldPosition			startPosition;
		static PatrolState				startPatrolState, BaseAssaultState;
		static PatrolPath					startPatrolPath, BaseAssaultPath;
		static boolean					willRequestHelp;
		static real						lastHelpRequestTime;
		static real						helpRequestFrequency;
		static real						attackerHelpRadius;
		static real						defenderHelpRadius;
		static integer					AttackStateHandle;
		static boolean					poweredDown;
		static integer					numFunctionalWeapons;
		static integer[20]				weaponList;
		static boolean					HeadingTowardBase;

		static boolean					checkBuilding2;


//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);
			

		AttackStateHandle = getStateHandle("attack");
		HeadingTowardBase = False;
		checkBuilding2 = False;


		//-------------------------------------------
		// Setup the Patrol here...
		//XL startPatrolState Start

		BaseAssaultState[0] = PATROL_TYPE_LOOPING;
		BaseAssaultState[1] = 5;    //?num points
		BaseAssaultState[2] = 1;    //?num cycles
		BaseAssaultState[3] = PATROL_DIRECTION_FORWARD;
		BaseAssaultState[4] = -1;    //reset cur point
		BaseAssaultState[5] = -1;    //reset cur cycle
		BaseAssaultState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

		BaseAssaultPath[0 ,0] = startPosition[0] + 470;
		BaseAssaultPath[0 ,1] = startPosition[1] - 43;
		BaseAssaultPath[1 ,0] = startPosition[0] + 1579;
		BaseAssaultPath[1 ,1] = startPosition[1] - 43;
		BaseAssaultPath[2 ,0] = startPosition[0] + 2091;
		BaseAssaultPath[2 ,1] = startPosition[1] - 4266;
		BaseAssaultPath[3 ,0] = startPosition[0] + 2603;
		BaseAssaultPath[3 ,1] = startPosition[1] - 5674;
		BaseAssaultPath[4 ,0] = startPosition[0] + 4224;
		BaseAssaultPath[4 ,1] = startPosition[1] - 7552;
		
		//XLs startPatrolPath end


		startPatrolState[0] = PATROL_TYPE_LOOPING;
		startPatrolState[1] = 3;    //?num points
		startPatrolState[2] = 1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

		startPatrolPath[0 ,0] = startPosition[0];
		startPatrolPath[0 ,1] = startPosition[1];
		startPatrolPath[1 ,0] = startPosition[0] + 500;
		startPatrolPath[1 ,1] = startPosition[1];
		startPatrolPath[2 ,0] = startPosition[0] + 1000;
		startPatrolPath[2 ,1] = startPosition[1];




		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 125; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;
		
		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		//--------------------------------------------------
		// Check to see if time to attack the player
		if (goGroup6) and (not HeadingTowardBase) then
			HeadingTowardBase = True;
			setTargetPriority(3, TARGET_PRIORITY_GAMEOBJECT, 197162, 425, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
			trans attackHQ;
		endif;
		
		
		//--------------------------------------------------
		//  checkIf Building is Poof
		if (objectStatus(197162) == OBJ_STATUS_DESTROYED) and (not checkBuilding2) then
			checkBuilding2 = True;
			setTargetPriority(3, TARGET_PRIORITY_NONE, 0, 0, 0);
		endif;
			

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;	
					case PILOT_EVENT_HIT:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------
	
state attack;

	var
		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttack(0, TACORDER_PARAM_STOP_AND_FIRE);
		//coreAttackTactic(0, TACORDER_PARAM_RUN, TACTIC_JOUST, tacticState);
	//	coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state attackHQ;

	var
		worldPosition			GuardHere;
	code

		GuardHere[0] = -1728;
		GuardHere[1] = -4757;
		GuardHere[2] = 0;
		
		update;
		setDebugString(-1, 3, "Guarding   ");	
		coreGuard(guardHere, -1 , AttackStateHandle);
		resetOrders(1);
endstate;


//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "Guarding   ");
		coreGuard(startPosition, -1, attackStateHandle);
		resetOrders(1);
		

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
