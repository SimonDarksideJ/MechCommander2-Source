//****************************************************************************************//
//
//		Brain Used for Enfield
//				
//
//      MISSION:  mc2_13
//		
//
//****************************************************************************************//

fsm mc2_13_Enfield_S;

	var


		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, WeapFacPatrolState;
		static PatrolPath			startPatrolPath, WeapFacPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static boolean			poweredDown;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			goWeapAttacked;



//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 270, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		goWeapAttacked = false;


		//-------------------------------------------	
		// Setup the Patrol here...	
		//XL startPatrolState Start	

		startPatrolState[0] = PATROL_TYPE_LINEAR;    	
		startPatrolState[1] = 3;    //?num points	
		startPatrolState[2] = -1;    //?num cycles	
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    	
		startPatrolState[4] = -1;    //reset cur point	
		startPatrolState[5] = -1;    //reset cur cycle	
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    	

		startPatrolPath[0, 0] = 1045.000;	
		startPatrolPath[0, 1] = 832.000;	
		startPatrolPath[1, 0] = 1216.000;	
		startPatrolPath[1, 1] = 1685.000;	
		startPatrolPath[2, 0] = 1557.000;	
		startPatrolPath[2, 1] = 2880.000;	
			
			

		WeapFacPatrolState[0] = PATROL_TYPE_LINEAR;    	
		WeapFacPatrolState[1] = 3;    //?num points	
		WeapFacPatrolState[2] = 1;    //?num cycles	
		WeapFacPatrolState[3] = PATROL_DIRECTION_FORWARD;    	
		WeapFacPatrolState[4] = -1;    //reset cur point	
		WeapFacPatrolState[5] = -1;    //reset cur cycle	
		WeapFacPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    	

		WeapFacPatrolPath[0, 0] = 64;	
		WeapFacPatrolPath[0, 1] = 1770;	
		WeapFacPatrolPath[1, 0] = -874;	
		WeapFacPatrolPath[1, 1] = 1856;	
		WeapFacPatrolPath[2, 0] = -1642;	
		WeapFacPatrolPath[2, 1] = 1514;	
			
	
		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 50; //?in meters
		defenderHelpRadius = 50; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;


		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		//--------------------------------------------------
		// Check If Weap Fac 1 has been attacked
		if (WeapFac2Attacked) and ((Not goWeapAttacked) And (Not MainSouthAttacked))then
			goWeapAttacked = True;
			trans goTOWeapFac2;
		endif;


		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code

		MainSouthAttacked = True;

		update;
		setDebugString(-1, 3, " ATTACK    ");
		AttackMusicTrigger1 = TRUE;
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_RIGHT_FLANK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state goTOWeapFac2;


	code


		setDebugString(-1, 3, " GoTo WeapFac2 ");
		update;
		corePatrol(WeapFacPatrolState, WeapFacPatrolPath, attackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state start;


	code


		setDebugString(-1, 3, " PatrolMain    ");
		update;
		corePatrol(startpatrolState, startPatrolPath, attackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
