//****************************************************************************************//
//
//		Ecounter 1 Group 3
//
//      MISSION:  Mc2_10
//		THis unit will Power up then RUN away from Ecounter 1 when the Time Trigger is set
//
//****************************************************************************************//

fsm mc2_10_EC1_Grp3a;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, runPatrolState;
		static PatrolPath			startPatrolPath, runPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle, RunAwayStateHandle;
		static Boolean			runAwayTest;
		static boolean			poweredDown;
		static boolean			EC1attackTest;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);


		AttackStateHandle = getStateHandle("attack1");
		RunAwayStateHandle = getStateHandle("RunAway");
		runAwayTest = False;
		poweredDown = False;


		startPatrolState[0] = PATROL_TYPE_LINEAR;
		startPatrolState[1] = 2;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;
		startPatrolPath[0, 0] = -2112.000;
		startPatrolPath[0, 1] = -4202.667;
		startPatrolPath[1, 0] = -2282.667;
		startPatrolPath[1, 1] = -4672.000;

		runPatrolState[0] = PATROL_TYPE_LINEAR;
		runPatrolState[1] = 2;    //?num points
		runPatrolState[2] = 1;    //?num cycles
		runPatrolState[3] = PATROL_DIRECTION_FORWARD;
		runPatrolState[4] = -1;    //reset cur point
		runPatrolState[5] = -1;    //reset cur cycle
		runPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;
		runPatrolPath[0, 0] = -960.000;
		runPatrolPath[0, 1] = -576.000;
		runPatrolPath[1, 0] = -1728.000;
		runPatrolPath[1, 1] = 2112.000;


		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;

		//-----------------------------------
		// Trigger for EC1 Movers to Attack the player
		if (ec1_Group_Attack) then
			if (Not EC1attackTest) then
				EC1attackTest= true;
				if (curStateHandle <> AttackStateHandle) then
					trans attack1;
				endif;
			endif;
		endif;

		//-----------------------------------
		// Trigger for EC1 Movers to Run Like Hell.

		if (ec1_Group_Run) then
			if (Not runAwayTest) then
				if (curStateHandle <> RunAwayStateHandle) then
					runAwayTest= true;
					//trans runAway;
				endif;
			endif;
		endif;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------


state attack1;

	code
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 500, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 400, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);

		update;
		ec1_Group_Trigger = True;
		ec1_Group_Attack = True;
		corePower(true);
		setDebugString(-1, 3, " Patrol1    ");
		//coreRun = True;
		corePatrol(startPatrolState, startPatrolPath, 0);
		resetOrders(1);
		trans attack;

endstate;

//----------------------------------------------------------------------------------------

state attack;
	
	var
		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		//coreAttackTactic(0, TACORDER_PARAM_RUN, TACTIC_LEFT_FLANK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------
state runAway;

	var
		worldPosition		gulagGuard;
		
	code
		setDebugString(-1, 3, "   RUNAWAY    ");
		AttackStateHandle = getStateHandle("attack");
		corePower(true);
		//coreRun = True;
		corePatrol(runPatrolState, runPatrolPath, attackStateHandle);
		gulagGuard[0] = -1514.667;
		gulagGuard[1] = 2837.333;
		gulagGuard[2] = 0.0;
		setMoveArea(gulagGuard, 50.0);
		setDebugString(-1, 3, "RUNGuard    ");
		coreGuard (gulagGuard, -1,  attackStateHandle);
		resetOrders(1);
	
endstate;
//----------------------------------------------------------------------------------------

state start;

	code

		if (not poweredDown) then
			//corePower(false);
			poweredDown = true;
		endif;

		update;
		setDebugString(-1, 3, "   GUARD    ");
		coreGuard(startPosition, -1, 0);
		corePower(true);
		setDebugString(-1, 3, "   TransAttack    ");
		resetOrders(1);
		trans attack1;
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
