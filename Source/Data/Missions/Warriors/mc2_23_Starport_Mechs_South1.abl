//****************************************************************************************//
//
//		Base 1 - Mechs
//			Group of ??? Mechs
//
//      MISSION:  Mc2_23
//		Unit(s) that GUARD the Starport
//		
//
//****************************************************************************************//

fsm mc2_23_Starport_Mechs_South1;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			AttackRearStateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//**************NEW***********************
		static PatrolState		startBase1PatrolState;
		static PatrolPath		startBase1PatrolPath;
		static PatrolState		startNorthPatrolState;
		static PatrolPath		startNorthPatrolPath;
		static PatrolState		startSouthPatrolState;
		static PatrolPath		startSouthPatrolPath;
		static boolean			PatrolToStarport_Check;
//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		AttackRearStateHandle = getStateHandle("attackrear");
		PatrolToStarport_Check = FALSE;

		startBase1PatrolState[0] = PATROL_TYPE_LINEAR;
		startBase1PatrolState[1] = 2;    //?num points
		startBase1PatrolState[2] = -1;    //?num cycles
		startBase1PatrolState[3] = PATROL_DIRECTION_FORWARD;
		startBase1PatrolState[4] = -1;    //reset cur point
		startBase1PatrolState[5] = -1;    //reset cur cycle
		startBase1PatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;

		startBase1PatrolPath[0, 0] = 2240.000;
		startBase1PatrolPath[0, 1] = -4928.000;
		startBase1PatrolPath[1, 0] = 1472.000;
		startBase1PatrolPath[1, 1] = -4928.000;


		startNorthPatrolState[0] = PATROL_TYPE_LINEAR;
		startNorthPatrolState[1] = 3;    //?num points
		startNorthPatrolState[2] = 1;    //?num cycles
		startNorthPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startNorthPatrolState[4] = -1;    //reset cur point
		startNorthPatrolState[5] = -1;    //reset cur cycle
		startNorthPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;

		startNorthPatrolPath[0, 0] = 576.000;
		startNorthPatrolPath[0, 1] = -5568.000;
		startNorthPatrolPath[1, 0] = -576.000;
		startNorthPatrolPath[1, 1] = -3776.000;
		startNorthPatrolPath[2, 0] = 2496.000;
		startNorthPatrolPath[2, 1] = -2240.000;


/*		startSouthPatrolState[0] = PATROL_TYPE_LINEAR;
		startSouthPatrolState[1] = 2;    //?num points
		startSouthPatrolState[2] = -1;    //?num cycles
		startSouthPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startSouthPatrolState[4] = -1;    //reset cur point
		startSouthPatrolState[5] = -1;    //reset cur cycle
		startSouthPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;

		startSouthPatrolPath[0, 0] = -1472.000;
		startSouthPatrolPath[0, 1] = -3776.000;
		startSouthPatrolPath[1, 0] = 2496.000;
		startSouthPatrolPath[1, 1] = -2240.000;
*/
		willRequestHelp = false; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;

		// Trigger for Rebels to Start Patrol to Starport
		if (Starport_Attacked_North) then
			if (NOT PatrolToStarport_Check) then
				PatrolToStarport_Check = TRUE;
				if (curStateHandle <> AttackStateHandle) then
					trans SouthPatrolToStarport;
				endif;
			endif;
		endif;
		
/*
		// Trigger for Rebels to Start Patrol to Starport
		if (Starport_Attacked_South) then
			if (NOT PatrolToStarport_Check) then
				PatrolToStarport_Check = TRUE;
				if (curStateHandle <> AttackStateHandle) then
					trans NorthPatrolToStarport;
				endif;
			endif;
		endif;
*/		

/*		// Trigger for Razorbacks to run away and hide by way of Bridge
		if (Starport_Attacked_North) then
			if (NOT Runaway_Trigger_Check) then
				Runaway_TimerDelay = getTime + 45; //Wait 10 secs before Running Away
				Runaway_Trigger_Check = TRUE;
			else
				if ((getTime > Runaway_TimerDelay) AND (Not Runaway_Timer_Check)) then
							Runaway_Timer_Check = TRUE;
							trans RunAwaybyWater;
				endif;
			endif;
		endif;
*/
		
		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) AND (curStateHandle <> AttackRearStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) AND (curStateHandle <> AttackRearStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state SouthPatrolToStarport;
	
	code
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		//coreRun = TRUE;
		update;
		setDebugString(-1, 3, " SouthPatrolToStarport    ");
		corePatrol(startNorthPatrolState, startNorthPatrolPath, AttackRearStateHandle);
		resetOrders(1);
		trans start;
endstate;


/*
//----------------------------------------------------------------------------------------

state NorthPatrolToStarport;
	
	code
		//coreRun = TRUE;
		update;
		setDebugString(-1, 3, " NorthPatrolToStarport    ");
//		corePatrol(startTownPatrolState, startTownPatrolPath, -1);
		corePatrol(startSouthPatrolState, startSouthPatrolPath, AttackRearStateHandle);
		resetOrders(1);
		
endstate;
*/

//----------------------------------------------------------------------------------------

state attackrear;

	var

		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_REAR, tacticState);
//		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;


//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code
		Starport_Attacked_South = TRUE;
		update;
		setDebugString(-1, 3, " ATTACK    ");
		AttackMusicTrigger1 = TRUE;
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_STOP_AND_ATTACK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, " PatrollingBase1     ");
		corePatrol(startBase1PatrolState, startBase1PatrolPath, AttackStateHandle);
//		coreGuard(startPosition, -1, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
