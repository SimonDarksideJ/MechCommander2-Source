//****************************************************************************************//
// 
//		Ecounter 2 Group 4
//
//      MISSION:  Mc2_10
//		This is the UNIT (Zeus) guarding the Command HQ
//		
//
//****************************************************************************************//

fsm mc2_10_EC2_pd;

	var

		static WorldPosition		startPosition;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			buildingID;
		static WorldPosition		buildingPos;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			startAttack;
		static boolean			poweredDown;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_BUILDING, 0, 200, -1);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);	


		AttackStateHandle = getStateHandle("attack");
		startAttack = False;
		poweredDown = False;

		buildingID = 91317;
		getObjectPosition(buildingID, buildingPos);

		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]	pilotEventParams;
		integer		curTarget;
		real		curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real		distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;
		
		//Check if it's time to start the Fireworks
		if (GoCam1) And (Not startAttack) then
			startAttack = True;
			trans StartTheAttack;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	code

		update;
		corePower(True);
		setDebugString(-1, 3, " ATTACK    ");
		ec1_Group_Run = True;
		ec2_attack_Gulag = True;
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state StartTheAttack;

	code

		update;
		corePower(True);
		setDebugString(-1, 3, "   GUARD    ");
		setMoveArea(buildingPos, 50.0);
		coreGuard(buildingPos, -1, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

state start;


	code

		if (not poweredDown) then
			corePower(False);
			poweredDown = True;
		endif;

		update;
		setDebugString(-1, 3, "Waiting   ");

endstate;


//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************

