//****************************************************************************************//
//
//		Dropship Encounter - Mixed
//			Group of ???
//
//      MISSION:  Mc2_23
//		Unit(s) that JUMP INTO AREA then GUARD Area
//		
//
//****************************************************************************************//

fsm mc2_23_dropship_ambush_south;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			Attack1StateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static PatrolState		startBase1PatrolState;
		static PatrolPath		startBase1PatrolPath;
		static boolean			Check_Ambush;

		static real				PUDelay;
		static boolean			PUpTime;
		static boolean			poweredDown;
//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 125, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		Attack1StateHandle = getStateHandle("attack1");

		Check_Ambush = FALSE;

		startBase1PatrolState[0] = PATROL_TYPE_LOOPING;
		startBase1PatrolState[1] = 2;    //?num points
		startBase1PatrolState[2] = -1;    //?num cycles
		startBase1PatrolState[3] = PATROL_DIRECTION_FORWARD;
		startBase1PatrolState[4] = -1;    //reset cur point
		startBase1PatrolState[5] = -1;    //reset cur cycle
		startBase1PatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;


//		startBase1PatrolPath[0, 0] = 3648.000;
//		startBase1PatrolPath[0, 1] = -64.000;
		startBase1PatrolPath[0, 0] = 4032.000;
		startBase1PatrolPath[0, 1] = -4800.000;
		startBase1PatrolPath[1, 0] = 4032.000;
		startBase1PatrolPath[1, 1] = -4032.000;

		
		willRequestHelp = false; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;

			if (getObjectDamage(210284) > 0 )  AND (NOT South_Drop_Attacked) Then
				South_Drop_Attacked = True;
			endif;
			
			if (South_Drop_Attacked) AND (NOT Check_Ambush) then
				Check_Ambush = True;
				trans Ambush;
			endif;
		
		//--------------------------------------------------
		//Time to Power UP
//			if ((PUpTime) and (PUDelay == -1)) then
//				PUDelay = getTime + 1;
//			endif;
//			if (PUDelay > 0) and (getTime > PUDelay) then
//				corePower(True);
//			endif;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state Ambush;
/*
	var

		integer		tacticState;

	code
		PUpTime = True;
		update;
		setDebugString(-1, 3, " Ambush    ");
		//coreRun = true;
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_FIRE_FROM_HERE, tacticState);
//		coreAttack(0, TACORDER_PARAM_PURSUE);
		corePatrol(startBase1PatrolState, startBase1PatrolPath, AttackStateHandle);
		resetOrders(1);
		transBack;
*/


	var
		worldposition		goHere;

	code

//		goHere[0] = startPosition[0];
//		goHere[1] = startPosition[1] + 427;
//		goHere[2] = 0;
		
		//PUpTime = True;
			corePower(true);
		goHere[0] = startPosition[0];
		goHere[1] = startPosition[1] + 530;
		goHere[2] = 0;

		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);


		update;
		setDebugString(-1, 3, " AMBUSHing    ");
		coreMoveTo(goHere, TACORDER_PARAM_JUMP);
		corePatrol(startBase1PatrolState, startBase1PatrolPath, AttackStateHandle);
//		trans basePatrol;
		

endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		//coreRun = true;
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_FIRE_FROM_HERE, tacticState);
    coreAttack(0, TACORDER_PARAM_PURSUE + TACORDER_PARAM_JUMP);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state start;

	code
		if (not poweredDown) then
			corePower(false);
			poweredDown = true;
		endif;

	
		setDebugString(-1, 3, " WAIT    ");
		update;
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
