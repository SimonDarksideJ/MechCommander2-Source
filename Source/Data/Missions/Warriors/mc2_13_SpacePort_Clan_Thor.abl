//****************************************************************************************//
//
//		Brain Used for Enfield 
//				
//
//      MISSION:  mc2_13
//		
//
//****************************************************************************************//

fsm mc2_13_SpacePort_Clan_Thor;

	var


		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, HpgFacPatrolState;
		static PatrolPath			startPatrolPath, HPGFacPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static boolean			poweredDown;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			goWeapAttacked;



//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 270, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		goWeapAttacked = false;
		poweredDown = False;
		setEject(True);


		//-------------------------------------------	
		// Setup the Patrol here...	
		//XL startPatrolState Start	

		startPatrolState[0] = PATROL_TYPE_LINEAR;    	
		startPatrolState[1] = 3;    //?num points	
		startPatrolState[2] = -1;    //?num cycles	
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    	
		startPatrolState[4] = -1;    //reset cur point	
		startPatrolState[5] = -1;    //reset cur cycle	
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    	

		startPatrolPath[0, 0] = -2581;	
		startPatrolPath[0, 1] = -4970;	
		startPatrolPath[1, 0] = -2922;	
		startPatrolPath[1, 1] = -5354;	
		startPatrolPath[2, 0] = -3733;	
		startPatrolPath[2, 1] = -5013;	
			
			

		HpgFacPatrolState[0] = PATROL_TYPE_LINEAR;    	
		HpgFacPatrolState[1] = 2;    //?num points	
		HpgFacPatrolState[2] = -1;    //?num cycles	
		HpgFacPatrolState[3] = PATROL_DIRECTION_FORWARD;    	
		HpgFacPatrolState[4] = -1;    //reset cur point	
		HpgFacPatrolState[5] = -1;    //reset cur cycle	
		HpgFacPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    	

		HPGFacPatrolPath[0, 0] = -2325;	
		HPGFacPatrolPath[0, 1] = -5098;	
		HPGFacPatrolPath[1, 0] = -2325;	
		HPGFacPatrolPath[1, 1] = -4373;	
			
	
		willRequestHelp = True; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 50; //?in meters
		defenderHelpRadius = 50; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;


		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		//--------------------------------------------------
		// Check If Weap Fac 2 has been attacked
		if (ClanBeenAttack) and ((Not goWeapAttacked))then
			goWeapAttacked = True;
			trans goPatroling;
		endif;


		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code
		corePower(True);
		ClanBeenAttack = True; 

		update;
		setDebugString(-1, 3, " ATTACK    ");
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_RIGHT_FLANK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state goPatroling;


	code
		corePower(True);

		setDebugString(-1, 3, " GoTo HPG ");
		update;
		corePatrol(HPGFacPatrolState, HPGFacPatrolPath, attackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state start;


	code
		if (not poweredDown) then
			poweredDown = True;
			corePower(False);
		endif;


		setDebugString(-1, 3, " Guarding    ");
		update;
		coreGuard(startPosition, -1, attackStateHandle);
		//corePatrol(startpatrolState, startPatrolPath, attackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
