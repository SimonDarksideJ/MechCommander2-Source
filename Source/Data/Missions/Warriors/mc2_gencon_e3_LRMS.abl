//****************************************************************************************//
// 
//		GROUP E3_LRMS
//
//      MISSION:  GENCON
//
//****************************************************************************************//

fsm mc2_gencon_e3_LRMS;

	var

		static WorldPosition	startPosition;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			buildingID;
		static real[3]			buildingPos;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

	var

		real[3]		weaponRanges;

    code

		//setDebugWindow(-1, -1);

		getObjectPosition(-1, startPosition);

		getWeaponRanges(-1, weaponRanges);
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, trunc(weaponRanges[2]), CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, trunc(weaponRanges[2]) - 5, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");

		buildingID = 89822;
		getObjectPosition(buildingID, buildingPos);

		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]	pilotEventParams;
		integer		curTarget;
		real		curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real		distanceToAttacker;
		integer		curStateHandle;
		real[3]		weaponRanges;


	code

		getWeaponRanges(-1, weaponRanges);
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, trunc(weaponRanges[2]), CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, trunc(weaponRanges[2]) - 5, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_NONE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_NONE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer			weaponsStatus;
		integer[35]		weaponList;
		integer			result;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		result = coreScan(0, -1);
		if (result <> 0) then
 			coreAttack(0, TACORDER_PARAM_NONE);
		endif;
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "   GUARD    ");
		coreGuard(startPosition, -1, attackStateHandle);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
