//****************************************************************************************//
// 
//		GROUP 1
//
//      MISSION:  GENCON
//		2nd Group Main Reinforcement (South Path)
//		Units: 3
//      	
//
//****************************************************************************************//

fsm mc2_gencon_group1_Flea1;

	var

		static WorldPosition	startPosition;
		static PatrolState		basePatrolState,group2PatrolState, playerPatrolState;
		static PatrolPath		basePatrolPath,group2PatrolPath, playerPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static integer			GoToBaseStateHandle;
		static integer			Group1AttacksStateHandle;
		static integer			Group0AttacksStateHandle;
		static boolean			GoToBaseSet;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 400, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		GoToBaseStateHandle = getStateHandle("goToBase");

		GoToBaseSet = false;

		basePatrolState[0] = PATROL_TYPE_LINEAR;    
		basePatrolState[1] = 2;    //?num points
		basePatrolState[2] = 1;    //?num cycles
		basePatrolState[3] = PATROL_DIRECTION_FORWARD;    
		basePatrolState[4] = -1;    //reset cur point
		basePatrolState[5] = -1;    //reset cur cycle
		basePatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		basePatrolPath[0, 0] = 64.0;
		basePatrolPath[0, 1] = 2752.0;
		basePatrolPath[1, 0] = -277.333;
		basePatrolPath[1, 1] = 2410.667;

		playerPatrolState[0] = PATROL_TYPE_LINEAR;    
		playerPatrolState[1] = 1;    //?num points
		playerPatrolState[2] = 1;    //?num cycles
		playerPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		playerPatrolState[4] = -1;    //reset cur point
		playerPatrolState[5] = -1;    //reset cur cycle
		playerPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		playerPatrolPath[0, 0] = 3989.33;
		playerPatrolPath[0, 1] = -2666.667;

		group2PatrolState[0] = PATROL_TYPE_LINEAR;    
		group2PatrolState[1] = 1;    //?num points
		group2PatrolState[2] = 1;    //?num cycles
		group2PatrolState[3] = PATROL_DIRECTION_FORWARD;    
		group2PatrolState[4] = -1;    //reset cur point
		group2PatrolState[5] = -1;    //reset cur cycle
		group2PatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		group2PatrolPath[0, 0] = 4047.667;
		group2PatrolPath[0, 1] = 106.667;

		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]	pilotEventParams;
		integer		curTarget;
		real		curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real		distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;

		//-----------------------------------
		// Is it time to move to a new state?
		curStateHandle = getCurrentStateHandle;
		if (GoToBaseFlag) then
			if (not GoToBaseSet) then
				GoToBaseSet = true;
				if (curStateHandle <> GoToBaseStateHandle) then
					mcprint("trans GoToBase");
					trans GoToBase;
				endif;
			endif;
		endif;

		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		Group1AttacksFlag = true;
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_REAR, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state goToBase;

	var

		WorldPosition	guardLocation;

	code

		update;
		setDebugString(-1, 3, "   gotToBase    ");

		guardLocation[0] = -277.333;
		guardLocation[1] = 2410.667;
		guardLocation[2] = 0.0;
		if (numFunctionalWeapons > 0) then
			corePatrol(basePatrolState, basePatrolPath, AttackStateHandle);
			coreGuard(guardLocation, -1, AttackStateHandle);
		else
			setDebugString(-1, 3, " gotToBase(NO WP) ");
			setMoveArea(startPosition, -1.0);
			corePatrol(basePatrolState, basePatrolPath, -1);
			trans noWeapons;
		endif;

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "   GUARD    ");
		setMoveArea(startPosition, -1.0);
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons > 0) then
			coreGuard(startPosition, -1, AttackStateHandle);
		else
			coreMoveTo(startPosition, 0);
			resetOrders(1);
		endif;

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
