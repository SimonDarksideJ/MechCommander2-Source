//****************************************************************************************//
// 
//		Ecounter B Extra Patrol Group
//
//      MISSION:  MC2_15
//			Mixed
//		This unit will scan for the player. And attack the player if detected
//
//****************************************************************************************//

fsm mc2_15_EB_East_Pat;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, assaultBaseState;
		static PatrolPath			startPatrolPath, assaultBasePath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

		static boolean			targetDestroyed;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 400, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_BUILDING, 0,150, -1);
		setTargetPriority(3, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		targetDestroyed = False;

		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 3;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		startPatrolPath[0, 0] = 5269;
		startPatrolPath[0, 1] = 21;
		startPatrolPath[1, 0] = 3818;
		startPatrolPath[1, 1] = 789;
		startPatrolPath[2, 0] = 1301;
		startPatrolPath[2, 1] = 2026;

		assaultBaseState[0] = PATROL_TYPE_LINEAR;    
		assaultBaseState[1] = 2;    //?num points
		assaultBaseState[2] = -1;    //?num cycles
		assaultBaseState[3] = PATROL_DIRECTION_FORWARD;    
		assaultBaseState[4] = -1;    //reset cur point
		assaultBaseState[5] = -1;    //reset cur cycle
		assaultBaseState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		assaultBasePath[0, 0] = 3264;
		assaultBasePath[0, 1] = -917;
		assaultBasePath[1, 0] = 3364;
		assaultBasePath[1, 1] = -917;



		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 125; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;
		char[25]		dstring;


	code
		//--------------------------------------------------
		// Check Time and Check Current State Handle
		curTime = getTime;
		curStateHandle = getCurrentStateHandle;
		//--------------------------------------------------


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

/*		//--------------------------------------------------
		//Move on to Next target if Target is destroyed
		if ((objectStatus(167708) == 1) or (objectStatus(167708) == 2)) then
			'mcprint("done");
			if (Not targetDestroyed) then
				targetDestroyed = True;
				trans assaultBase;
			endif;
		endif;

*/

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;
	var

		integer		tacticState;
	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		
		coreAttackTactic(0, TACORDER_PARAM_NONE, 0, tacticState);
//		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;
//----------------------------------------------------------------------------------------

state assaultBase;
	
	code

	setDebugString(-1, 3, " assaultBase    ");	
	corePatrol(assaultBaseState, assaultBasePath, AttackStateHandle);
	resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "StartPatrol1     ");
		//coreGuard(startPosition, -1 , AttackStateHandle);
		corePatrol(startPatrolState, startPatrolPath, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
