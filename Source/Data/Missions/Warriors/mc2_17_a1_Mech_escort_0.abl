//****************************************************************************************//
//
//		Brains used for Escort of Liao Son
//				
//
//      MISSION:  Mc2_17
//		
//		
//
//****************************************************************************************//

fsm mc2_17_a1_Mech_escort_0;

	var


		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, basePatrolstate;
		static PatrolPath			startPatrolPath, basePatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static boolean			poweredDown;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

			static boolean			escortJason;
			static boolean			JasonStatusDeath;
		static real				TurnSensor; //Timer to Turn on Big Sensors




//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 0, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		escortJason = False;
		JasonStatusDeath = False;

		TurnSensor = -1;

		escortUnitID = getID;


		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 7;    //?num points
		startPatrolState[2] = 1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		startPatrolPath[0, 0] = -6762;
		startPatrolPath[0, 1] = -362 - 44;
		startPatrolPath[1, 0] = -6421;
		startPatrolPath[1, 1] = -661 - 44;
		startPatrolPath[2, 0] = -5866;
		startPatrolPath[2, 1] = -1216- 44;
		startPatrolPath[3, 0] = -5104;
		startPatrolPath[3, 1] = -1514 - 44;
		startPatrolPath[4, 0] = -3605;
		startPatrolPath[4, 1] = -4501 - 44;
		startPatrolPath[5, 0] = -1002;
		startPatrolPath[5, 1] = -4160 - 44;
		startPatrolPath[6, 0] = 1173;
		startPatrolPath[6, 1] = -2709 - 44;	

		BasePatrolState[0] = PATROL_TYPE_LINEAR;    
		BasePatrolState[1] = 2;    //?num points
		BasePatrolState[2] = -1;    //?num cycles
		BasePatrolState[3] = PATROL_DIRECTION_FORWARD;    
		BasePatrolState[4] = -1;    //reset cur point
		BasePatrolState[5] = -1;    //reset cur cycle
		BasePatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		BasePatrolPath[0, 0] = 2837;
		BasePatrolPath[0, 1] = -3050;
		BasePatrolPath[1, 0] = -4970;
		BasePatrolPath[1, 1] = -234;



		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;


		//-----------------------------------
		//
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		//--------------------------------------------------
		// Check to see if Liao Son has died
		if (((objectStatus(escortUnitID) == 1) or (objectStatus(escortUnitID) == 2)) and (Not JasonStatusDeath)) then
			JasonStatusDeath = True;
			trans GuardBase;
		endif;

/**************DEBUG
		//--------------------------------------------------
		// Check to see if time to attack the player
		if (LiaoSonAttack) and (Not escortJason ) AND (getTime > 20) then
			escortJason = True;
			TurnSensor = getTime + 13;
			trans EscortLiao;
		endif;

*/

		//--------------------------------------------------
		// Check to see if time to attack the player
		if (LiaoSonAttack) and (Not escortJason ) then
			escortJason = True;
			trans EscortLiao;
		endif;


		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;


//----------------------------------------------------------------------------------------

state EscortLiao;

	var


		WorldPosition		escortPos;

	code

		if (getTime > TurnSensor) then
			setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
			setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 500, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
			TurnSensor = -1;
		endif;

		update;
		setDebugString(-1, 3, "   ESCORT    ");
		
		getObjectPosition(escortUnitID , escortPos);		
		setMoveArea(escortPos, 100.0);
		//coreRun = True;
		coreEscort(escortUnitID , 40.0, 135.0, attackstateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state GuardBase;

	var


		WorldPosition		GuardBase;

	code
		guardBase[0] = 1258;
		guardBase[1] = -1045;
		guardBase[1] = 0;


		update;
		setDebugString(-1, 3, " GuardBase    ");
		
		coreGuard(GuardBase, -1, attackstateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state attack;

	var

		integer		tacticState;

	code


		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_RIGHT_FLANK, tacticState);
//		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state start;

		var 
			char [25]			dstring;

	code


		setDebugString(-1, 3, " WAIT    ");
		update;

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
