//****************************************************************************************//
//
//	FIGHTER: PATROL AND CALL IN REINFORCEMENTS
//      MISSION:  Mc2_06
//		
//      	 	
//
//****************************************************************************************//

fsm mc2_06_w3_2;

	var

		static WorldPosition		startPosition;
		static integer		retreatBuilding;
		static PatrolState	patrolState1;
		static PatrolPath		patrolPath1;
		static PatrolState	startpatrolState;
		static PatrolPath		startpatrolPath;
		static boolean		willRequestHelp;
		static real			lastHelpRequestTime;
		static real			helpRequestFrequency;
		static real			attackerHelpRadius;
		static real			defenderHelpRadius;
		static integer		AttackStateHandle;
		//char[25]			debugS;  //DEBUG
		static integer 	numhits;
		static boolean		BeenHit;

			
//****************************************************************************************

//state attack; forward;

function init;

	var

		integer		i;
		integer		numPatrolPoints;

    code

		//----------------------------------------------------
		// Grab his start position, and set his start state...
		getObjectPosition(-1, startPosition);
		//setPilotState(PILOT_STATE_PATROL);
		//setDebugWindow(-1, -1);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 275, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		retreatBuilding = 0;

		AttackStateHandle = getStateHandle("attack");

		//-------------------------				
		// Setup the Patrol here...
		patrolState1[0] = PATROL_TYPE_LINEAR;
		patrolState1[1] = 1; //?num points
		patrolState1[2] = 1; //?num cycles
		patrolState1[3] = PATROL_DIRECTION_FORWARD;
		patrolState1[4] = -1; //reset cur point
		patrolState1[5] = -1; //reset cur cycle
		patrolState1[6] = CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_NOT_DISABLED;
		patrolPath1[0, 0] = -4245.333; //?x coord
		patrolPath1[0, 1] = -2666.667; //?y coord
		
		//get off the edge of the map
		startPatrolState[0] = PATROL_TYPE_LINEAR;
		startPatrolState[1] = 4;    //?num points
		startPatrolState[2] = 1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;


		startPatrolPath[0, 0] = startPosition[0];
		startPatrolPath[0, 1] = startPosition[1];
		startPatrolPath[1, 0] = startPosition[0] + 213;
		startPatrolPath[1, 1] = startPosition[1];
		startPatrolPath[2, 0] = startPosition[0] + 853;
		startPatrolPath[2, 1] = startPosition[1];
		startPatrolPath[3, 0] = startPosition[0] +1237;
		startPatrolPath[3, 1] = startPosition[1];
	
//***************var
numhits = 0;
BeenHit = False;

//***************endvar		
						
		willRequestHelp = true; //?true or false
		helpRequestFrequency = 50.0; //?in secs
		attackerHelpRadius = 125; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]	pilotEventParams;
		integer		curTarget;
		real		curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real		distanceToAttacker;


	code

		curTime = getTime;

		//---------------------------------------------------------
		// First, process the pilot events since the last update...
		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						if (curTarget == 0) then
							coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
							setState(AttackStateHandle);
						endif;
						endcase;
					case PILOT_EVENT_HIT:
					numhits = numhits + 1;
					BeenHit = False;
						endcase;
					case PILOT_EVENT_DAMAGED:
						endcase;
					case PILOT_EVENT_FRIENDLY_KILLED:
						endcase;
					case PILOT_EVENT_FRIENDLY_CRIPPLED:
						endcase;
					case PILOT_EVENT_FRIENDLY_DESTROYED:
						endcase;
					case PILOT_EVENT_CRIPPLED:
						endcase;
					case PILOT_EVENT_DESTROYED:
						endcase;
					case PILOT_EVENT_WITHDRAWN:
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curTarget == 0) then
							coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
							setState(AttackStateHandle);
						endif;
						endcase;
					case PILOT_EVENT_COLLISION:
						endcase;
					case PILOT_EVENT_GUARD_RADIUS_BREACH:
						endcase;
					case PILOT_EVENT_TARGET_KILLED:
						endcase;
					case PILOT_EVENT_MATE_FIRED_WEAPON:
						endcase;
					case PILOT_EVENT_PLAYER_ORDER:
						endcase;
					case PILOT_EVENT_NO_MOVEPATH:
						endcase;
					case PILOT_EVENT_GATE_CLOSING:
						endcase;
					case PILOT_EVENT_CONTACT:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state attack;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state start;
	var			
		integer		tacticState;
		char [50] s;
		
	code
		//coreWait(20, -1, -1);
		coreWait(620, -1, -1);
		update;

		s =  "TACTIC_FIRE_FROM_HERE ";
		concat(s, numhits);
		setDebugString(-1, 3, s);
		
		if (numhits > 2) and (not BeenHit) then
	    // If I have taken 3 or more hits attack enemy.
			BeenHit = True;
			trans Attack;
		endif;
		
		setDebugString(-1, 3, " PATROL      ");
		patrol(startpatrolState, startpatrolPath);
		patrol(patrolState1, patrolPath1);
		setDebugString(-1, 3, " ATTACKGATE      ");
		coreAttack(177692, TACORDER_PARAM_PURSUE);
		setDebugString(-1, 3, " ATTACKHQ      ");
		coreAttack(197162, TACORDER_PARAM_PURSUE); //Steiner HQ @	 -1813.33, -4970.67
				
endstate;

//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
