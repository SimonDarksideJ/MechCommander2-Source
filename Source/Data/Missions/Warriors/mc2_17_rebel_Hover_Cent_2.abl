//****************************************************************************************//
// 
//		Brain used Rebel Troops
//			CenterGroup
//      MISSION:  Mc2_17
//
//
//****************************************************************************************//

fsm mc2_17_rebel_Hover_Cent_2;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState;
		static PatrolPath			startPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static boolean			poweredDown;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			spawnRebels;



//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 350, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);


		AttackStateHandle = getStateHandle("attack");
		spawnRebels = False;

		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 4;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		startPatrolPath[0, 0] = 5738;
		startPatrolPath[0, 1] = 1088 + 88;
		startPatrolPath[1, 0] = 5013;
		startPatrolPath[1, 1] = 1600 + 88;
		startPatrolPath[2, 0] = 4416;
		startPatrolPath[2, 1] = 2069 + 88;
		startPatrolPath[3, 0] = 3733;
		startPatrolPath[3, 1] = 2666 + 88;




		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 125; //?in meters
		lastHelpRequestTime = -100.0;

		setWillHelp(True);
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;



		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;




		//--------------------------------------------------
		// Check to see if time to guard base
		if (goRebelHover) and (Not spawnRebels) then
			spawnRebels = True;
			trans enterTheRebels;
		endif;



		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var
		integer		tacticState;
		worldposition		test;


	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_REAR, tacticState);
		//coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state PatrolLake;

	code

		update;

		setDebugString(-1, 3, "enterTheRebels ");	
		corePatrol(startPatrolState, startPatrolPath, AttackStateHandle);
		resetOrders(1);
	
endstate;


//----------------------------------------------------------------------------------------

state enterTheRebels;

	var
		worldPosition		MoveSpot;

	code

		MoveSpot[0] = 7061;
		MoveSpot[1] = startPosition[1];
		MoveSpot[2] = 0;
		
		update;
		setDebugString(-1, 3, "GuardArea ");
		coreMoveTo(MoveSpot, 0);
		resetOrders(1);
		trans PatrolLake;

	
endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
