//****************************************************************************************//
// 
//		This brain is used to guard the Base
//				Used For Bush and Cat
//      MISSION:  Mc2_20
//
//
//****************************************************************************************//

fsm mc2_20_MogM_escort_M1;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, BaseAssaultState;
		static PatrolPath			startPatrolPath, BaseAssaultPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static boolean			poweredDown;


		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			HeadingTowardBase;
		static worldposition		MogPosition;
		static boolean			setOffset;
		static worldposition		offsetParam;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 75, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 250, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);


		AttackStateHandle = getStateHandle("attack");
		HeadingTowardBase = False;
		setOffset = false;


		//-------------------------------------------
		// Setup the Patrol here...
		//XL startPatrolState Start

		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 6;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    


		startPatrolPath[0, 0] = startPosition[0];
		startPatrolPath[0, 1] = startPosition[1];
		startPatrolPath[1, 0] = startPosition[0] + 768;
		startPatrolPath[1, 1] = startPosition[1] + 85;
		startPatrolPath[2, 0] = startPosition[0] + 2390;
		startPatrolPath[2, 1] = startPosition[1] + 725;
		startPatrolPath[3, 0] = startPosition[0] + 2091;
		startPatrolPath[3, 1] = startPosition[1] - 512;
		startPatrolPath[4, 0] = startPosition[0] + 342;
		startPatrolPath[4, 1] = startPosition[1] - 2219;
		startPatrolPath[5, 0] = startPosition[0] + 384;
		startPatrolPath[5, 1] = startPosition[1] - 1195;



		
		//XLs startPatrolPath end





		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 125; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Update of MogPosition
		if (getTime > 8) and (Not setOffset) then
			setOffset = True;
			offsetParam[0] = MogM_StartPos[0] - startPosition[0];
			offsetParam[1] = MogM_StartPos[1] - startPosition[1];
		endif;


		//--------------------------------------------------
		// Update of MogPosition


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

			

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var
		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		//coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_JOUST, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE + TACORDER_PARAM_NONE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state escorting;
	
	var 

		worldPosition 		goHere;


	code

		update;
		getObjectPosition(MogM_PartID, MogPosition);
		goHere[0] = MogPosition[0] - offsetParam[0];
		goHere[1] = MogPosition[1] - offsetParam[1];
		goHere[2] = 0;
		
		setDebugString(-1, 3, "escorting   ");
	
		coreGuard(goHere, -1, attackstateHandle);
		resetOrders(1);

endstate;


//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "ShortWait   ");
		coreWait(12, -1, -1);	
		trans escorting;

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
