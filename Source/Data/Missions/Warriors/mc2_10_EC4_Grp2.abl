//****************************************************************************************//
//
//		Ecounter 4 Group 2
//
//      MISSION:  Mc2_10
//		This is 2nd of the Reinforcement Groups
//		
//
//****************************************************************************************//

fsm mc2_10_EC4_Grp2;

	var

		static WorldPosition		startPosition;
		static PatrolState		gulagPatrolState;
		static PatrolPath			gulagPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static real				goToGulagTimer;
		static Boolean			TestgoGulag, TimerGoGulag;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED); //PLACEHOLDER
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED); //PLACEHOLDER
		setTargetPriority(2, TARGET_PRIORITY_BUILDING, 0, 100, -1);

		AttackStateHandle = getStateHandle("attack");
		TestgoGulag = False;
		TimerGoGulag = False;


		//-------------------------------------------
		// Setup the Patrol here...
		//XL gulagPatrolState Start


		gulagPatrolState[0] = PATROL_TYPE_LINEAR;
		gulagPatrolState[1] = 8;    //?num points
		gulagPatrolState[2] = 1;    //?num cycles
		gulagPatrolState[3] = PATROL_DIRECTION_FORWARD;
		gulagPatrolState[4] = -1;    //reset cur point
		gulagPatrolState[5] = -1;    //reset cur cycle
		gulagPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;

				gulagPatrolPath[0 ,0] = startPosition[0] ;
				gulagPatrolPath[0 ,1] = startPosition[1] ;
				gulagPatrolPath[1 ,0] = startPosition[0] + 0;
				gulagPatrolPath[1 ,1] = startPosition[1] - 488;
				gulagPatrolPath[2 ,0] = startPosition[0] + 299;
				gulagPatrolPath[2 ,1] = startPosition[1] - 1238;
				gulagPatrolPath[3 ,0] = startPosition[0] + 597;
				gulagPatrolPath[3 ,1] = startPosition[1] - 1835;
				gulagPatrolPath[4 ,0] = startPosition[0] + 811;
				gulagPatrolPath[4 ,1] = startPosition[1] - 3627;
				gulagPatrolPath[5 ,0] = startPosition[0] + 43;
				gulagPatrolPath[5 ,1] = startPosition[1] - 4992;
				gulagPatrolPath[6 ,0] = startPosition[0] - 1109;
				gulagPatrolPath[6 ,1] = startPosition[1] - 6528;
				gulagPatrolPath[7 ,0] = startPosition[0] - 3413;
				gulagPatrolPath[7 ,1] = startPosition[1] - 7552;
	
		//XLs gulagPatrolPath end



		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;
		//-----------------------------------
		// Trigger for to set the Timer for Reinforcements to Attack the Gulag
		//-----------------------------------
		// Trigger for to set the Timer for Reinforcements to Attack the Gulag
		if (Reinforce_Go) then
			if (Not TestGoGulag) then
				TestGoGulag= true;
				goToGulagTimer = getTime + 80
			else
				if (Not TimerGoGulag) AND (getTime > goToGulagTimer) then
					TimerGoGulag  = True;
					trans toGulag;
				endif;
			endif;
		endif;



		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		AttackMusicTrigger1 = TRUE;
		coreAttack(0, TACORDER_PARAM_PURSUE + TACORDER_PARAM_NONE);
		resetOrders(1);
		transBack;

endstate;


//----------------------------------------------------------------------------------------

state toGulag;
	
	var
		worldPosition	gulagGuard;

	code

		update;
		setDebugString(-1, 3, " ToGulag    ");
		corePatrol(gulagPatrolState, gulagPatrolPath, attackStateHandle);
		gulagGuard[0] = -1728.000;
		gulagGuard[1] = 2122.000;
		gulagGuard[2] = 0.0;
		coreGuard(gulagGuard, -1, AttackStateHandle);
		resetOrders(1);
		
endstate;
//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "Wait      ");

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
