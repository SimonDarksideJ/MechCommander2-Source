//****************************************************************************************//
// 
//		Ecounter 5 Med Mechs at HPG
//			Vulture
//
//      MISSION:  mc2_13 
//		This unit will scan for the player. And attack the player if detected
//
//****************************************************************************************//

fsm mc2_13_EC5_MECH2;

	var

		static WorldPosition		startPosition;
		static PatrolState		HPGPatrolState;
		static PatrolPath			HPGPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			HpgAttackTest;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 150, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 400, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		HpgAttackTest = False;

		HPGPatrolState[0] = PATROL_TYPE_LINEAR;    
		HPGPatrolState[1] = 2;    //?num points
		HPGPatrolState[2] = -1;    //?num cycles
		HPGPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		HPGPatrolState[4] = -1;    //reset cur point
		HPGPatrolState[5] = -1;    //reset cur cycle
		HPGPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		HPGPatrolPath[0, 0] = -3349.000;
		HPGPatrolPath[0, 1] = -960.000;
		HPGPatrolPath[1, 0] = 3434.667;
		HPGPatrolPath[1, 1] = 1941.333;



		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code
		//--------------------------------------------------
		// Check Time and Check Current State Handle
		curTime = getTime;
		curStateHandle = getCurrentStateHandle;
		//--------------------------------------------------

		//--------------------------------------------------
		//Test if HPG has been Attacked Yet
		if (HPGBeenAttack) AND (Not HpgAttackTest) then
			HpgAttackTest = True;
			trans GoHPG;
		endif;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;
	var

		integer		tacticState;
	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
//		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_RIGHT_FLANK, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state GoHPG;

	code

		update;
		setDebugString(-1, 3, "GoHPG     ");
		corePatrol(HPGPatrolState, HPGPatrolPath, AttackStateHandle);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		update;
		setDebugString(-1, 3, "StartPatrol1     ");
		coreGuard(startPosition, -1 , AttackStateHandle);
		//corePatrol(startPatrolState, startPatrolPath, AttackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
