//****************************************************************************************//
// 
//		Ecounter 2   Heavy Mech Shut Down in Base
//			
//
//      MISSION:  Mc2_2 Liao Palace
//		This Unit will power Up and attack the player.
//
//****************************************************************************************//

fsm mc2_22_EC2_Medium_Shutdown;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, palacePatrolState, AlertPatrolState;
		static PatrolPath			startPatrolPath, palacePatrolPath, AlertPatrolPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;
		static boolean			poweredDown;

		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;

		static boolean			goto_Palace;
		static boolean			baseAttack;
		static boolean			pAlarmSounded;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 50, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_NONE, 0, 0, 0);

		AttackStateHandle = getStateHandle("attack");
		goto_Palace = False;
		poweredDown = False;
		baseAttack = False;
		pAlarmSounded = False;		


		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 3;    //?num points
		startPatrolState[2] = -1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
			startPatrolPath[0 ,0] = startPosition[0] ;
			startPatrolPath[0 ,1] = startPosition[1] ;
			startPatrolPath[1 ,0] = startPosition[0] - 725.333;
			startPatrolPath[1 ,1] = startPosition[1] - 341.334;
			startPatrolPath[2 ,0] = startPosition[0] - 1792;
			startPatrolPath[2 ,1] = startPosition[1] - 426.667;





		palacePatrolState[0] = PATROL_TYPE_LINEAR;    
		palacePatrolState[1] = 2;    //?num points
		palacePatrolState[2] = 1;    //?num cycles
		palacePatrolState[3] = PATROL_DIRECTION_FORWARD;    
		palacePatrolState[4] = -1;    //reset cur point
		palacePatrolState[5] = -1;    //reset cur cycle
		palacePatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		palacePatrolPath[0, 0] = 4288.000;
		palacePatrolPath[0, 1] = 2410.667;
		palacePatrolPath[1, 0] = 4288.000;
		palacePatrolPath[1, 1] = 2410.667;

		AlertPatrolState[0] = PATROL_TYPE_LINEAR;    
		AlertPatrolState[1] = 3;    //?num points
		AlertPatrolState[2] = -1;    //?num cycles
		AlertPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		AlertPatrolState[4] = -1;    //reset cur point
		AlertPatrolState[5] = -1;    //reset cur cycle
		AlertPatrolState[6] = CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED;    
		AlertPatrolPath[0, 0] = 1600.000;
		AlertPatrolPath[0, 1] = 1770.667;
		AlertPatrolPath[1, 0] = 3776.000;
		AlertPatrolPath[1, 1] = -448.000;
		AlertPatrolPath[2, 0] = 6250.667;
		AlertPatrolPath[2, 1] = 533.333;


		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 200; //?in meters
		defenderHelpRadius = 225; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		//--------------------------------------------------
		// Check Time and Check Current State Handle
		curTime = getTime;
		curStateHandle = getCurrentStateHandle;
		//--------------------------------------------------

		//--------------------------------------------------
		//Check if I should head towards the Palace
		if (palaceBeenAttack) then
			if (NOT goto_Palace) then
				goto_Palace = True;
				trans goToPalace;
			endif;
		endif;


		//--------------------------------------------------
		//Check if Base is under Attack
		if (baseUnderAttack) And (Not perimeterAlarm) and (Not palaceBeenAttack) then
			if (NOT baseAttack) then
				baseAttack = True;
				trans BaseAttack;
			endif;
		endif;

		//--------------------------------------------------
		//Check if Base is under Attack
		if (perimeterAlarm) then
			if (NOT pAlarmSounded) then
				pAlarmSounded = True;
				trans BaseAttack;
			endif;
		endif;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;
	var

		integer		tacticState;
	code

		corePower(True);
		baseUnderAttack = True;

		update;
		setDebugString(-1, 3, " ATTACK    ");
		coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_RIGHT_FLANK, tacticState);
//		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------
state	goToPalace;

	code
		update;
		corePower(True);
		setDebugString(-1, 3, " GoPalace    ");	
		corePatrol(palacePatrolState, palacePatrolPath, attackStateHandle);
		trans guardPalace;

endstate;

//----------------------------------------------------------------------------------------
state guardPalace;

	var
		worldPosition		palaceGuard;

	code
		update;
		setDebugString(-1, 3, " GuardPalace    ");
		palaceGuard[0] = 4288.000;
		palaceGuard[1] = 2410.667;
		palaceGuard[2] = 0.0;
		setMoveArea(palaceGuard, 50.0);
		coreGuard (palaceGuard, -1,  attackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------
state BaseOnAlert;

	code

		corePower(True);

		update;
		setDebugString(-1, 3, "AlertPatrol     ");
		//coreRun = True;
		corePatrol(AlertPatrolState, AlertPatrolPath, attackStateHandle);
		resetOrders(1);
endstate;

//----------------------------------------------------------------------------------------
state BaseAttack;

	code

		corePower(True);

		update;
		setDebugString(-1, 3, "AttackPatrol     ");
		corePatrol (startPatrolState, startPatrolPath , attackStateHandle);
		corePower(True);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

state start;

	code

		if (not poweredDown) then
			corePower(false);
			poweredDown = true;
		endif;

		update;
		setDebugString(-1, 3, "StartPatrol1     ");
		coreGuard(startPosition, -1 , attackStateHandle);
		corePower(True);
		resetOrders(1);

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
