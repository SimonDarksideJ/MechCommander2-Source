//****************************************************************************************//
// 
//		This brain is used to guard the Base
//
//      MISSION:  Mc2_2 Tutorial Brain
//
//
//****************************************************************************************//

fsm mc2_18_Grp1_Veh;

	var

		static WorldPosition		startPosition;
		static PatrolState		startPatrolState, Look4PlayState;
		static PatrolPath			startPatrolPath, Look4PlayPath;
		static boolean			willRequestHelp;
		static real				lastHelpRequestTime;
		static real				helpRequestFrequency;
		static real				attackerHelpRadius;
		static real				defenderHelpRadius;
		static integer			AttackStateHandle;

		static boolean			poweredDown;


		static integer			numFunctionalWeapons;
		static integer[20]		weaponList;
		static boolean			HeadingTowardBase;

//****************************************************************************************

function init;

    code

		//setDebugWindow(-1, -1);

		//---------------------------
		// Grab his start position...
		getObjectPosition(-1, startPosition);

		//-------------------
		// Look for movers...
		setTargetPriority(0, TARGET_PRIORITY_CURTARGET, -1, 100, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(1, TARGET_PRIORITY_MOVER, 0, 300, CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL_OR_SENSOR + CONTACT_CRITERIA_NOT_DISABLED);
		setTargetPriority(2, TARGET_PRIORITY_BUILDING, 0, 75, -1);

		AttackStateHandle = getStateHandle("attack");
		HeadingTowardBase = False;

		//-------------------------------------------
		// Setup the Patrol here...
		//XL startPatrolState Start

		startPatrolState[0] = PATROL_TYPE_LINEAR;    
		startPatrolState[1] = 7;    //?num points
		startPatrolState[2] = 1;    //?num cycles
		startPatrolState[3] = PATROL_DIRECTION_FORWARD;    
		startPatrolState[4] = -1;    //reset cur point
		startPatrolState[5] = -1;    //reset cur cycle
		startPatrolState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED;    


		startPatrolPath[0, 0] = startPosition[0];
		startPatrolPath[0, 1] = startPosition[1] - 700.0;
		startPatrolPath[1, 0] = -4202;
		startPatrolPath[1, 1] = 5653;
		startPatrolPath[2, 0] = -4288;
		startPatrolPath[2, 1] = 2368;
		startPatrolPath[3, 0] = -2282;
		startPatrolPath[3, 1] = 960;
		startPatrolPath[4, 0] = -1984;
		startPatrolPath[4, 1] = -149;
		startPatrolPath[5, 0] = -1984;
		startPatrolPath[5, 1] = -2453;
		startPatrolPath[6, 0] = -3648;
		startPatrolPath[6, 1] = -3306;
		
		
		//XLs startPatrolPath end

		Look4PlayState[0] = PATROL_TYPE_LINEAR;    
		Look4PlayState[1] = 5;    //?num points
		Look4PlayState[2] = -1;    //?num cycles
		Look4PlayState[3] = PATROL_DIRECTION_FORWARD;    
		Look4PlayState[4] = -1;    //reset cur point
		Look4PlayState[5] = -1;    //reset cur cycle
		Look4PlayState[6] = 0 + CONTACT_CRITERIA_ENEMY + CONTACT_CRITERIA_VISUAL + CONTACT_CRITERIA_NOT_DISABLED; 

				Look4PlayPath[0 ,0] = startPosition[0] + 2432;
				Look4PlayPath[0 ,1] = startPosition[1] - 10581.334;
				Look4PlayPath[1 ,0] = startPosition[0] + 3669.334;
				Look4PlayPath[1 ,1] = startPosition[1] - 9856;
				Look4PlayPath[2 ,0] = startPosition[0] + 6229.334;
				Look4PlayPath[2 ,1] = startPosition[1] - 9557.334;
				Look4PlayPath[3 ,0] = startPosition[0] + 6485.334;
				Look4PlayPath[3 ,1] = startPosition[1] - 6869.334;
				Look4PlayPath[4 ,0] = startPosition[0] + 8277.334;
				Look4PlayPath[4 ,1] = startPosition[1] - 7424;





		willRequestHelp = true; //?true or false
		helpRequestFrequency = 20.0; //?in secs
		attackerHelpRadius = 100; //?in meters
		defenderHelpRadius = 125; //?in meters
		lastHelpRequestTime = -100.0;
						
endfunction;


//----------------------------------------------------------------------------------------

function setWillRequestHelp (boolean setting);

	code

		if (setting and (not willRequestHelp)) then
			lastHelpRequestTime = 0.0;
		endif;
		willRequestHelp = setting;

endfunction;

//----------------------------------------------------------------------------------------

function update : integer;

	var

		boolean		processingPilotEvents;
		boolean		thinking;
		integer		pilotEventID;
		integer		pilotState;
		integer[20]		pilotEventParams;
		integer		curTarget;
		real			curTime;
		real[3]		myPos;
		real[3]		attackerPos;
		real			distanceToAttacker;
		integer		curStateHandle;


	code

		curTime = getTime;
		curStateHandle = getCurrentStateHandle;


		//--------------------------------------------------
		// Process the pilot events since the last update...
		numFunctionalWeapons = getWeapons(weaponList, 1);
		if (numFunctionalWeapons == 0) then
			trans noWeapons;
		endif;

		//--------------------------------------------------
		// Check to see if time to attack the player
		if (goGroup1 ) and (not HeadingTowardBase) then
			HeadingTowardBase = True;
			trans BaseAssault;
		endif;

			

		processingPilotEvents = TRUE;
		while (processingPilotEvents) do
			pilotEventID = getNextPilotEvent(pilotEventParams);
			if (pilotEventID == PILOT_EVENT_NONE) then
				processingPilotEvents = FALSE;
			else
				switch (pilotEventID)
					case PILOT_EVENT_TARGETED:
						curTarget = getTarget(-1);
						if (lastHelpRequestTime < (curTime - helpRequestFrequency)) then
							lastHelpRequestTime = curTime;
							if (willRequestHelp) then
								//distanceToAttacker = distanceToObject(-1, pilotEventParams[0]);
								getObjectPosition(pilotEventParams[0], attackerPos);
								getObjectPosition(-1, myPos);
								requestHelp(pilotEventParams[0], myPos, attackerHelpRadius, attackerPos, defenderHelpRadius, 1);
							endif;
						endif;
						numFunctionalWeapons = getWeapons(weaponList, 0);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0)) then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_ATTACK_ORDER:
						curTarget = getTarget(-1);
						if (curStateHandle <> AttackStateHandle) then
							if ((numFunctionalWeapons > 0) and (curTarget == 0))then
								coreAttack(pilotEventParams[0], TACORDER_PARAM_PURSUE);
								setState(AttackStateHandle);
							endif;
						endif;
						endcase;
					case PILOT_EVENT_FIRED_WEAPON:
						endcase;
				endswitch;
			endif;
		endwhile;

		return(0);

endfunction;

//----------------------------------------------------------------------------------------

state noWeapons;

	code

		setDebugString(-1, 3, "   NO WEAPONS ");
		if (objectClass(-1) == 2) then
			coreEject;
		else
			corePower(false);
		endif;
		
endstate;

//----------------------------------------------------------------------------------------

state attack;

	var
		integer		tacticState;

	code

		update;
		setDebugString(-1, 3, " ATTACK    ");
		//coreAttackTactic(0, TACORDER_PARAM_NONE, TACTIC_JOUST, tacticState);
		coreAttack(0, TACORDER_PARAM_PURSUE);
		resetOrders(1);
		transBack;

endstate;

//----------------------------------------------------------------------------------------

state BaseAssault;

	code

		update;

		setDebugString(-1, 3, " BaseAssault   ");	
		corePatrol(startPatrolState, startPatrolPath, attackstateHandle);
		trans Look4Play;

endstate;

//----------------------------------------------------------------------------------------

state Look4Play;

	code

		update;

		setDebugString(-1, 3, " Look4Play   ");	
		corePatrol(Look4PlayState, Look4PlayPath, attackstateHandle);
		resetOrders(1);

endstate;



//----------------------------------------------------------------------------------------

state start;

	code

		update;

endstate;

//----------------------------------------------------------------------------------------

endfsm.

//****************************************************************************************
